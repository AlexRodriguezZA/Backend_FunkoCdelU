{"{\"assumptions\":{},\"sourceRoot\":\"/home/alex/FunkoCdelU_App/ksdjidsjijdskodskoadsdas/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/alex/FunkoCdelU_App/ksdjidsjijdskodskoadsdas\",\"filename\":\"/home/alex/FunkoCdelU_App/ksdjidsjijdskodskoadsdas/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/alex/FunkoCdelU_App/ksdjidsjijdskodskoadsdas\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.19.3:development":{"value":{"code":"const express = require('express');\nconst {\n  postgraphile\n} = require('postgraphile');\nconst app = express();\nconst userDb = 'alex';\nconst userPass = 1234;\nconst host = 'localhost';\nconst database = 'BBDD_FunkoCdelU';\napp.use(postgraphile(`postgres://${userDb}:${userPass}@${host}/${database}` || \"postgres://postgres:postgres@127.0.0.1:5432/name-databases\", [\"public\"], {\n  watchPg: true,\n  graphiql: true,\n  enableCors: true,\n  enhanceGraphiql: true,\n  showErrorStack: true\n}));\nconst main = async () => {\n  const port = '3000';\n  await app.listen(port);\n  console.log(`Conectado pa http://localhost:3000/graphiql`);\n};\nmain();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInBvc3RncmFwaGlsZSIsImFwcCIsInVzZXJEYiIsInVzZXJQYXNzIiwiaG9zdCIsImRhdGFiYXNlIiwidXNlIiwid2F0Y2hQZyIsImdyYXBoaXFsIiwiZW5hYmxlQ29ycyIsImVuaGFuY2VHcmFwaGlxbCIsInNob3dFcnJvclN0YWNrIiwibWFpbiIsInBvcnQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIvaG9tZS9hbGV4L0Z1bmtvQ2RlbFVfQXBwL2tzZGppZHNqaWpkc2tvZHNrb2Fkc2Rhcy8iLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSAgcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgeyBwb3N0Z3JhcGhpbGUgfSA9IHJlcXVpcmUoJ3Bvc3RncmFwaGlsZScpO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5jb25zdCB1c2VyRGIgPSAnYWxleCdcbmNvbnN0IHVzZXJQYXNzID0gMTIzNFxuY29uc3QgaG9zdCA9ICdsb2NhbGhvc3QnXG5jb25zdCBkYXRhYmFzZSA9ICdCQkREX0Z1bmtvQ2RlbFUnXG5cbmFwcC51c2UoXG4gICAgcG9zdGdyYXBoaWxlKFxuICAgICAgYHBvc3RncmVzOi8vJHt1c2VyRGJ9OiR7dXNlclBhc3N9QCR7aG9zdH0vJHtkYXRhYmFzZX1gIHx8IFwicG9zdGdyZXM6Ly9wb3N0Z3Jlczpwb3N0Z3Jlc0AxMjcuMC4wLjE6NTQzMi9uYW1lLWRhdGFiYXNlc1wiLFxuICAgICAgWyBcInB1YmxpY1wiXSxcbiAgICAgIHtcbiAgICAgICAgd2F0Y2hQZzogdHJ1ZSxcbiAgICAgICAgZ3JhcGhpcWw6IHRydWUsXG4gICAgICAgIGVuYWJsZUNvcnM6IHRydWUsXG4gICAgICAgIGVuaGFuY2VHcmFwaGlxbDogdHJ1ZSxcbiAgICAgICAgc2hvd0Vycm9yU3RhY2s6IHRydWVcbiAgICAgIH1cbiAgICApXG4gICk7XG4gIFxuY29uc3QgbWFpbiA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwb3J0ID0gJzMwMDAnO1xuICAgIGF3YWl0IGFwcC5saXN0ZW4ocG9ydCk7XG4gICAgY29uc29sZS5sb2coYENvbmVjdGFkbyBwYSBodHRwOi8vbG9jYWxob3N0OjMwMDAvZ3JhcGhpcWxgKTtcbiAgfVxuICBcbm1haW4oKSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFJQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ25DLE1BQU07RUFBRUM7QUFBYSxDQUFDLEdBQUdELE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDaEQsTUFBTUUsR0FBRyxHQUFHSCxPQUFPLEVBQUU7QUFFckIsTUFBTUksTUFBTSxHQUFHLE1BQU07QUFDckIsTUFBTUMsUUFBUSxHQUFHLElBQUk7QUFDckIsTUFBTUMsSUFBSSxHQUFHLFdBQVc7QUFDeEIsTUFBTUMsUUFBUSxHQUFHLGlCQUFpQjtBQUVsQ0osR0FBRyxDQUFDSyxHQUFHLENBQ0hOLFlBQVksQ0FDVCxjQUFhRSxNQUFPLElBQUdDLFFBQVMsSUFBR0MsSUFBSyxJQUFHQyxRQUFTLEVBQUMsSUFBSSw0REFBNEQsRUFDdEgsQ0FBRSxRQUFRLENBQUMsRUFDWDtFQUNFRSxPQUFPLEVBQUUsSUFBSTtFQUNiQyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsZUFBZSxFQUFFLElBQUk7RUFDckJDLGNBQWMsRUFBRTtBQUNsQixDQUFDLENBQ0YsQ0FDRjtBQUVILE1BQU1DLElBQUksR0FBRyxZQUFZO0VBQ3JCLE1BQU1DLElBQUksR0FBRyxNQUFNO0VBQ25CLE1BQU1aLEdBQUcsQ0FBQ2EsTUFBTSxDQUFDRCxJQUFJLENBQUM7RUFDdEJFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLDZDQUE0QyxDQUFDO0FBQzVELENBQUM7QUFFSEosSUFBSSxFQUFFIn0=","map":{"version":3,"names":["express","require","postgraphile","app","userDb","userPass","host","database","use","watchPg","graphiql","enableCors","enhanceGraphiql","showErrorStack","main","port","listen","console","log"],"sourceRoot":"/home/alex/FunkoCdelU_App/ksdjidsjijdskodskoadsdas/","sources":["index.js"],"sourcesContent":["const express =  require('express');\nconst { postgraphile } = require('postgraphile');\nconst app = express();\n\nconst userDb = 'alex'\nconst userPass = 1234\nconst host = 'localhost'\nconst database = 'BBDD_FunkoCdelU'\n\napp.use(\n    postgraphile(\n      `postgres://${userDb}:${userPass}@${host}/${database}` || \"postgres://postgres:postgres@127.0.0.1:5432/name-databases\",\n      [ \"public\"],\n      {\n        watchPg: true,\n        graphiql: true,\n        enableCors: true,\n        enhanceGraphiql: true,\n        showErrorStack: true\n      }\n    )\n  );\n  \nconst main = async () => {\n    const port = '3000';\n    await app.listen(port);\n    console.log(`Conectado pa http://localhost:3000/graphiql`);\n  }\n  \nmain()"],"mappings":"AAAA,MAAMA,OAAO,GAAIC,OAAO,CAAC,SAAS,CAAC;AACnC,MAAM;EAAEC;AAAa,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AAChD,MAAME,GAAG,GAAGH,OAAO,EAAE;AAErB,MAAMI,MAAM,GAAG,MAAM;AACrB,MAAMC,QAAQ,GAAG,IAAI;AACrB,MAAMC,IAAI,GAAG,WAAW;AACxB,MAAMC,QAAQ,GAAG,iBAAiB;AAElCJ,GAAG,CAACK,GAAG,CACHN,YAAY,CACT,cAAaE,MAAO,IAAGC,QAAS,IAAGC,IAAK,IAAGC,QAAS,EAAC,IAAI,4DAA4D,EACtH,CAAE,QAAQ,CAAC,EACX;EACEE,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE,IAAI;EAChBC,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAE;AAClB,CAAC,CACF,CACF;AAEH,MAAMC,IAAI,GAAG,YAAY;EACrB,MAAMC,IAAI,GAAG,MAAM;EACnB,MAAMZ,GAAG,CAACa,MAAM,CAACD,IAAI,CAAC;EACtBE,OAAO,CAACC,GAAG,CAAE,6CAA4C,CAAC;AAC5D,CAAC;AAEHJ,IAAI,EAAE"}},"mtime":1665413951506},"{\"assumptions\":{},\"sourceRoot\":\"/home/alex/FunkoCdelU_App/Backend/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/alex/FunkoCdelU_App/Backend\",\"filename\":\"/home/alex/FunkoCdelU_App/Backend/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/alex/FunkoCdelU_App/Backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.19.3:development":{"value":{"code":"const express = require(\"express\");\nconst mercadopago = require(\"mercadopago\");\nconst {\n  postgraphile\n} = require(\"postgraphile\");\nconst userDb = \"alex\";\nconst userPass = 1234;\nconst host = \"localhost\";\nconst database = \"BBDD_Funko\";\nasync function ConfirmaCarrito(dni) {\n  const response = await fetch('http://localhost:5000/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `mutation {\n              confirmarComprarDelCarrito(input: {dniUser: ${dni}}) {\n                clientMutationId\n              }\n            }\n            \n            `\n    })\n  });\n  const respuesta = await response.json();\n  console.log(respuesta);\n}\nasync function ConfirmaVenta(dni) {\n  const response = await fetch('http://localhost:5000/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `mutation {\n              confirmarEstadoDeVenta(input: {dni: ${dni}}) {\n                clientMutationId\n              }\n            }\n            \n            `\n    })\n  });\n  const respuesta = await response.json();\n  console.log(respuesta);\n}\nasync function getDataUser(email) {\n  const response = await fetch('http://localhost:5000/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `query MyQuery {\n              usuarioByEmail(email: \"${email}\") {\n                dni\n              }\n            }\n            \n            `\n    })\n  });\n  const respuesta = await response.json();\n  return respuesta.data.usuarioByEmail;\n}\n\n/*1Backend 2 ngrok=port 5000 */\nconst {\n  MySchemaCategoriasPlugins\n} = require(\"./Schemas/Categorias/Categorias.js\");\nconst app = express();\napp.post(\"/notificar\", async (req, res) => {\n  await notificar(req, res);\n});\nconst notificar = async (req, res) => {\n  try {\n    mercadopago.configure({\n      access_token: \"TEST-5873713881795945-030921-d57166b7b2e69778a0aee6a8bca9190b-1327386578\"\n    });\n    const {\n      query\n    } = req;\n    let payment;\n    const topic = query.topic || query.type;\n    if (topic == \"payment\") {\n      const paymentId = query.id || query[\"data.id\"];\n      payment = await mercadopago.payment.findById(paymentId);\n      console.log(payment);\n      const items = payment.body.additional_info.items;\n      const status = payment.body.status;\n      const email = payment.body.metadata.id_user;\n      console.log(status, paymentId);\n\n      /* TODO: Buscar como ver los pagos anteriores */\n      /*FUnciones bases de datos */\n      /*if (status === \"approved\") {\n       const data_user = await getDataUser(email)\n       console.log(data_user.dni)  \n       console.log(\"Carritoooo\")\n       await ConfirmaCarrito(data_user.dni)\n       console.log(\"VENTAAAAA\")   \n       await ConfirmaVenta(data_user.dni) \n      }\n      else{\n       console.log(\"Compra no aprovada\")\n      }\n      */\n\n      res.status(200);\n    } else {\n      res.status(400);\n    }\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\napp.use(postgraphile(`postgres://${userDb}:${userPass}@${host}/${database}` || \"postgres://postgres:postgres@127.0.0.1:5432/name-databases\", [\"public\"], {\n  watchPg: true,\n  graphiql: true,\n  enableCors: true,\n  enhanceGraphiql: true,\n  showErrorStack: true,\n  appendPlugins: [MySchemaCategoriasPlugins]\n}));\nconst main = async () => {\n  const port = 5000;\n  await app.listen(port);\n  console.log(`Conectado pa http://localhost:${port}/graphiql`);\n};\nmain();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["express","require","mercadopago","postgraphile","userDb","userPass","host","database","ConfirmaCarrito","dni","response","fetch","method","headers","body","JSON","stringify","query","respuesta","json","console","log","ConfirmaVenta","getDataUser","email","data","usuarioByEmail","MySchemaCategoriasPlugins","app","post","req","res","notificar","configure","access_token","payment","topic","type","paymentId","id","findById","items","additional_info","status","metadata","id_user","err","use","watchPg","graphiql","enableCors","enhanceGraphiql","showErrorStack","appendPlugins","main","port","listen"],"sourceRoot":"/home/alex/FunkoCdelU_App/Backend/","sources":["index.js"],"sourcesContent":["const express = require(\"express\");\nconst mercadopago = require(\"mercadopago\")\nconst { postgraphile } = require(\"postgraphile\");\n\n\nconst userDb = \"alex\";\nconst userPass = 1234;\nconst host = \"localhost\";\nconst database = \"BBDD_Funko\";\n\nasync function ConfirmaCarrito(dni) {\n  const response = await fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n          query: `mutation {\n              confirmarComprarDelCarrito(input: {dniUser: ${dni}}) {\n                clientMutationId\n              }\n            }\n            \n            `\n      }),\n    })\n\n    const respuesta = await response.json()\n    console.log(respuesta)\n\n}\n\nasync function ConfirmaVenta(dni) {\n  const response = await fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n          query: `mutation {\n              confirmarEstadoDeVenta(input: {dni: ${dni}}) {\n                clientMutationId\n              }\n            }\n            \n            `\n      }),\n    })\n\n    const respuesta = await response.json()\n    console.log(respuesta)\n\n}\n\n\nasync function getDataUser(email) {\n  const response = await fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n          query: `query MyQuery {\n              usuarioByEmail(email: \"${email}\") {\n                dni\n              }\n            }\n            \n            `\n      }),\n    })\n\n    const respuesta = await response.json()\n    return respuesta.data.usuarioByEmail;\n\n}\n\n\n/*1Backend 2 ngrok=port 5000 */\nconst {\n  MySchemaCategoriasPlugins,\n} = require(\"./Schemas/Categorias/Categorias.js\");\nconst app = express();\n\n\n\napp.post(\"/notificar\", async (req, res) => {\n  await notificar(req, res);\n});\n\nconst notificar = async (req, res) => {\n  try {\n    mercadopago.configure({\n      access_token:\n        \"TEST-5873713881795945-030921-d57166b7b2e69778a0aee6a8bca9190b-1327386578\",\n    });\n\n    const { query } = req;\n\n    let payment;\n\n    const topic = query.topic || query.type;\n\n    if (topic == \"payment\") {\n      const paymentId = query.id || query[\"data.id\"];\n      payment = await mercadopago.payment.findById(paymentId);\n\n      \n      console.log(payment)\n      const items = payment.body.additional_info.items;\n      const status = payment.body.status;\n      const email = payment.body.metadata.id_user;\n      console.log(status,paymentId)\n      \n      /* TODO: Buscar como ver los pagos anteriores */\n       /*FUnciones bases de datos */\n       /*if (status === \"approved\") {\n        const data_user = await getDataUser(email)\n        console.log(data_user.dni)  \n        console.log(\"Carritoooo\")\n        await ConfirmaCarrito(data_user.dni)\n        console.log(\"VENTAAAAA\")   \n        await ConfirmaVenta(data_user.dni) \n      }\n      else{\n        console.log(\"Compra no aprovada\")\n      }\n     */\n      \n      res.status(200);\n    } else {\n      res.status(400);\n    }\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\n\napp.use(\n  postgraphile(\n    `postgres://${userDb}:${userPass}@${host}/${database}` ||\n      \"postgres://postgres:postgres@127.0.0.1:5432/name-databases\",\n    [\"public\"],\n    {\n      watchPg: true,\n      graphiql: true,\n      enableCors: true,\n      enhanceGraphiql: true,\n      showErrorStack: true,\n      appendPlugins: [MySchemaCategoriasPlugins],\n    }\n  )\n);\n\nconst main = async () => {\n  const port = 5000;\n  await app.listen(port);\n  console.log(`Conectado pa http://localhost:${port}/graphiql`);\n};\n\nmain();\n"],"mappings":"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"}},"mtime":1678550555371},"{\"assumptions\":{},\"sourceRoot\":\"/home/alex/FunkoCdelU_App/Backend/Schemas/Categorias/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/alex/FunkoCdelU_App/Backend\",\"filename\":\"/home/alex/FunkoCdelU_App/Backend/Schemas/Categorias/Categorias.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/alex/FunkoCdelU_App/Backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.19.3:development":{"value":{"code":"const {\n  makeExtendSchemaPlugin,\n  gql\n} = require(\"graphile-utils\");\nconst MySchemaCategoriasPlugins = makeExtendSchemaPlugin(build => {\n  const {\n    pgSql: sql\n  } = build;\n  return {\n    typeDefs: gql`\n  \n      extend type Query {\n          # Individual record\n          randomCategoria: Categoria\n  \n          # List record\n          randomCategoriaList: [Categoria!]\n        }\n      `,\n    resolvers: {\n      Query: {\n        /*\n         * Individual record needs to return just one row but\n         * `selectGraphQLResultFromTable` always returns an array; so the\n         * resolver is responsible for turning the array into a single record.\n         */\n        randomCategoria: async (_query, args, context, resolveInfo) => {\n          // Remember: resolveInfo.graphile.selectGraphQLResultFromTable is where the PostGraphile\n          // look-ahead magic happens!\n          const rows = await resolveInfo.graphile.selectGraphQLResultFromTable(sql.fragment`public.categoria`, (tableAlias, queryBuilder) => {\n            queryBuilder.orderBy(sql.fragment`random()`);\n            queryBuilder.limit(1);\n          });\n          return rows[0];\n        },\n        /*\n         * Connection and list resolvers are identical; PostGraphile handles\n         * the complexities for you. We've simplified these down to a direct\n         * call to `selectGraphQLResultFromTable` but you may wish to wrap this\n         * with additional logic.\n         */\n        randomCategoriaList: (_query, args, context, resolveInfo) => resolveInfo.graphile.selectGraphQLResultFromTable(sql.fragment`public.categoria`, (tableAlias, queryBuilder) => {\n          queryBuilder.orderBy(sql.fragment`random()`);\n        })\n      }\n    }\n  };\n});\nmodule.exports = {\n  MySchemaCategoriasPlugins\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtYWtlRXh0ZW5kU2NoZW1hUGx1Z2luIiwiZ3FsIiwicmVxdWlyZSIsIk15U2NoZW1hQ2F0ZWdvcmlhc1BsdWdpbnMiLCJidWlsZCIsInBnU3FsIiwic3FsIiwidHlwZURlZnMiLCJyZXNvbHZlcnMiLCJRdWVyeSIsInJhbmRvbUNhdGVnb3JpYSIsIl9xdWVyeSIsImFyZ3MiLCJjb250ZXh0IiwicmVzb2x2ZUluZm8iLCJyb3dzIiwiZ3JhcGhpbGUiLCJzZWxlY3RHcmFwaFFMUmVzdWx0RnJvbVRhYmxlIiwiZnJhZ21lbnQiLCJ0YWJsZUFsaWFzIiwicXVlcnlCdWlsZGVyIiwib3JkZXJCeSIsImxpbWl0IiwicmFuZG9tQ2F0ZWdvcmlhTGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6Ii9ob21lL2FsZXgvRnVua29DZGVsVV9BcHAvQmFja2VuZC9TY2hlbWFzL0NhdGVnb3JpYXMvIiwic291cmNlcyI6WyJDYXRlZ29yaWFzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgbWFrZUV4dGVuZFNjaGVtYVBsdWdpbiwgZ3FsIH0gPSByZXF1aXJlKFwiZ3JhcGhpbGUtdXRpbHNcIik7XG5cblxuY29uc3QgIE15U2NoZW1hQ2F0ZWdvcmlhc1BsdWdpbnMgPSBtYWtlRXh0ZW5kU2NoZW1hUGx1Z2luKGJ1aWxkID0+IHtcbiAgICBjb25zdCB7IHBnU3FsOiBzcWwgfSA9IGJ1aWxkO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlRGVmczogZ3FsYFxuICBcbiAgICAgIGV4dGVuZCB0eXBlIFF1ZXJ5IHtcbiAgICAgICAgICAjIEluZGl2aWR1YWwgcmVjb3JkXG4gICAgICAgICAgcmFuZG9tQ2F0ZWdvcmlhOiBDYXRlZ29yaWFcbiAgXG4gICAgICAgICAgIyBMaXN0IHJlY29yZFxuICAgICAgICAgIHJhbmRvbUNhdGVnb3JpYUxpc3Q6IFtDYXRlZ29yaWEhXVxuICAgICAgICB9XG4gICAgICBgLFxuICAgICAgcmVzb2x2ZXJzOiB7XG4gICAgICAgIFF1ZXJ5OiB7XG4gICAgICAgICAgLypcbiAgICAgICAgICAgKiBJbmRpdmlkdWFsIHJlY29yZCBuZWVkcyB0byByZXR1cm4ganVzdCBvbmUgcm93IGJ1dFxuICAgICAgICAgICAqIGBzZWxlY3RHcmFwaFFMUmVzdWx0RnJvbVRhYmxlYCBhbHdheXMgcmV0dXJucyBhbiBhcnJheTsgc28gdGhlXG4gICAgICAgICAgICogcmVzb2x2ZXIgaXMgcmVzcG9uc2libGUgZm9yIHR1cm5pbmcgdGhlIGFycmF5IGludG8gYSBzaW5nbGUgcmVjb3JkLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJhbmRvbUNhdGVnb3JpYTogYXN5bmMgKF9xdWVyeSwgYXJncywgY29udGV4dCwgcmVzb2x2ZUluZm8pID0+IHtcbiAgICAgICAgICAgIC8vIFJlbWVtYmVyOiByZXNvbHZlSW5mby5ncmFwaGlsZS5zZWxlY3RHcmFwaFFMUmVzdWx0RnJvbVRhYmxlIGlzIHdoZXJlIHRoZSBQb3N0R3JhcGhpbGVcbiAgICAgICAgICAgIC8vIGxvb2stYWhlYWQgbWFnaWMgaGFwcGVucyFcbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSBhd2FpdCByZXNvbHZlSW5mby5ncmFwaGlsZS5zZWxlY3RHcmFwaFFMUmVzdWx0RnJvbVRhYmxlKFxuICAgICAgICAgICAgICBzcWwuZnJhZ21lbnRgcHVibGljLmNhdGVnb3JpYWAsXG4gICAgICAgICAgICAgICh0YWJsZUFsaWFzLCBxdWVyeUJ1aWxkZXIpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeUJ1aWxkZXIub3JkZXJCeShzcWwuZnJhZ21lbnRgcmFuZG9tKClgKTtcbiAgICAgICAgICAgICAgICBxdWVyeUJ1aWxkZXIubGltaXQoMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gcm93c1swXTtcbiAgICAgICAgICB9LFxuICBcbiAgICAgICAgICAvKlxuICAgICAgICAgICAqIENvbm5lY3Rpb24gYW5kIGxpc3QgcmVzb2x2ZXJzIGFyZSBpZGVudGljYWw7IFBvc3RHcmFwaGlsZSBoYW5kbGVzXG4gICAgICAgICAgICogdGhlIGNvbXBsZXhpdGllcyBmb3IgeW91LiBXZSd2ZSBzaW1wbGlmaWVkIHRoZXNlIGRvd24gdG8gYSBkaXJlY3RcbiAgICAgICAgICAgKiBjYWxsIHRvIGBzZWxlY3RHcmFwaFFMUmVzdWx0RnJvbVRhYmxlYCBidXQgeW91IG1heSB3aXNoIHRvIHdyYXAgdGhpc1xuICAgICAgICAgICAqIHdpdGggYWRkaXRpb25hbCBsb2dpYy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByYW5kb21DYXRlZ29yaWFMaXN0OiAoX3F1ZXJ5LCBhcmdzLCBjb250ZXh0LCByZXNvbHZlSW5mbykgPT5cbiAgICAgICAgICAgIHJlc29sdmVJbmZvLmdyYXBoaWxlLnNlbGVjdEdyYXBoUUxSZXN1bHRGcm9tVGFibGUoXG4gICAgICAgICAgICAgIHNxbC5mcmFnbWVudGBwdWJsaWMuY2F0ZWdvcmlhYCxcbiAgICAgICAgICAgICAgKHRhYmxlQWxpYXMsIHF1ZXJ5QnVpbGRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5QnVpbGRlci5vcmRlckJ5KHNxbC5mcmFnbWVudGByYW5kb20oKWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH0pO1xuICBcbiAgbW9kdWxlLmV4cG9ydHMgPSB7TXlTY2hlbWFDYXRlZ29yaWFzUGx1Z2luc307Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBLHNCQUFzQjtFQUFFQztBQUFJLENBQUMsR0FBR0MsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBR2pFLE1BQU9DLHlCQUF5QixHQUFHSCxzQkFBc0IsQ0FBQ0ksS0FBSyxJQUFJO0VBQy9ELE1BQU07SUFBRUMsS0FBSyxFQUFFQztFQUFJLENBQUMsR0FBR0YsS0FBSztFQUM1QixPQUFPO0lBQ0xHLFFBQVEsRUFBRU4sR0FBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztJQUNETyxTQUFTLEVBQUU7TUFDVEMsS0FBSyxFQUFFO1FBQ0w7QUFDVjtBQUNBO0FBQ0E7QUFDQTtRQUNVQyxlQUFlLEVBQUUsT0FBT0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsV0FBVyxLQUFLO1VBQzdEO1VBQ0E7VUFDQSxNQUFNQyxJQUFJLEdBQUcsTUFBTUQsV0FBVyxDQUFDRSxRQUFRLENBQUNDLDRCQUE0QixDQUNsRVgsR0FBRyxDQUFDWSxRQUFTLGtCQUFpQixFQUM5QixDQUFDQyxVQUFVLEVBQUVDLFlBQVksS0FBSztZQUM1QkEsWUFBWSxDQUFDQyxPQUFPLENBQUNmLEdBQUcsQ0FBQ1ksUUFBUyxVQUFTLENBQUM7WUFDNUNFLFlBQVksQ0FBQ0UsS0FBSyxDQUFDLENBQUMsQ0FBQztVQUN2QixDQUFDLENBQ0Y7VUFDRCxPQUFPUCxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLENBQUM7UUFFRDtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7UUFDVVEsbUJBQW1CLEVBQUUsQ0FBQ1osTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsV0FBVyxLQUN0REEsV0FBVyxDQUFDRSxRQUFRLENBQUNDLDRCQUE0QixDQUMvQ1gsR0FBRyxDQUFDWSxRQUFTLGtCQUFpQixFQUM5QixDQUFDQyxVQUFVLEVBQUVDLFlBQVksS0FBSztVQUM1QkEsWUFBWSxDQUFDQyxPQUFPLENBQUNmLEdBQUcsQ0FBQ1ksUUFBUyxVQUFTLENBQUM7UUFDOUMsQ0FBQztNQUVQO0lBQ0Y7RUFDRixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUZNLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQUN0QjtBQUF5QixDQUFDIn0=","map":{"version":3,"names":["makeExtendSchemaPlugin","gql","require","MySchemaCategoriasPlugins","build","pgSql","sql","typeDefs","resolvers","Query","randomCategoria","_query","args","context","resolveInfo","rows","graphile","selectGraphQLResultFromTable","fragment","tableAlias","queryBuilder","orderBy","limit","randomCategoriaList","module","exports"],"sourceRoot":"/home/alex/FunkoCdelU_App/Backend/Schemas/Categorias/","sources":["Categorias.js"],"sourcesContent":["const { makeExtendSchemaPlugin, gql } = require(\"graphile-utils\");\n\n\nconst  MySchemaCategoriasPlugins = makeExtendSchemaPlugin(build => {\n    const { pgSql: sql } = build;\n    return {\n      typeDefs: gql`\n  \n      extend type Query {\n          # Individual record\n          randomCategoria: Categoria\n  \n          # List record\n          randomCategoriaList: [Categoria!]\n        }\n      `,\n      resolvers: {\n        Query: {\n          /*\n           * Individual record needs to return just one row but\n           * `selectGraphQLResultFromTable` always returns an array; so the\n           * resolver is responsible for turning the array into a single record.\n           */\n          randomCategoria: async (_query, args, context, resolveInfo) => {\n            // Remember: resolveInfo.graphile.selectGraphQLResultFromTable is where the PostGraphile\n            // look-ahead magic happens!\n            const rows = await resolveInfo.graphile.selectGraphQLResultFromTable(\n              sql.fragment`public.categoria`,\n              (tableAlias, queryBuilder) => {\n                queryBuilder.orderBy(sql.fragment`random()`);\n                queryBuilder.limit(1);\n              }\n            );\n            return rows[0];\n          },\n  \n          /*\n           * Connection and list resolvers are identical; PostGraphile handles\n           * the complexities for you. We've simplified these down to a direct\n           * call to `selectGraphQLResultFromTable` but you may wish to wrap this\n           * with additional logic.\n           */\n          randomCategoriaList: (_query, args, context, resolveInfo) =>\n            resolveInfo.graphile.selectGraphQLResultFromTable(\n              sql.fragment`public.categoria`,\n              (tableAlias, queryBuilder) => {\n                queryBuilder.orderBy(sql.fragment`random()`);\n              }\n            ),\n        }\n      },\n    };\n  });\n  \n  module.exports = {MySchemaCategoriasPlugins};"],"mappings":"AAAA,MAAM;EAAEA,sBAAsB;EAAEC;AAAI,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAGjE,MAAOC,yBAAyB,GAAGH,sBAAsB,CAACI,KAAK,IAAI;EAC/D,MAAM;IAAEC,KAAK,EAAEC;EAAI,CAAC,GAAGF,KAAK;EAC5B,OAAO;IACLG,QAAQ,EAAEN,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;IACDO,SAAS,EAAE;MACTC,KAAK,EAAE;QACL;AACV;AACA;AACA;AACA;QACUC,eAAe,EAAE,OAAOC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,WAAW,KAAK;UAC7D;UACA;UACA,MAAMC,IAAI,GAAG,MAAMD,WAAW,CAACE,QAAQ,CAACC,4BAA4B,CAClEX,GAAG,CAACY,QAAS,kBAAiB,EAC9B,CAACC,UAAU,EAAEC,YAAY,KAAK;YAC5BA,YAAY,CAACC,OAAO,CAACf,GAAG,CAACY,QAAS,UAAS,CAAC;YAC5CE,YAAY,CAACE,KAAK,CAAC,CAAC,CAAC;UACvB,CAAC,CACF;UACD,OAAOP,IAAI,CAAC,CAAC,CAAC;QAChB,CAAC;QAED;AACV;AACA;AACA;AACA;AACA;QACUQ,mBAAmB,EAAE,CAACZ,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,WAAW,KACtDA,WAAW,CAACE,QAAQ,CAACC,4BAA4B,CAC/CX,GAAG,CAACY,QAAS,kBAAiB,EAC9B,CAACC,UAAU,EAAEC,YAAY,KAAK;UAC5BA,YAAY,CAACC,OAAO,CAACf,GAAG,CAACY,QAAS,UAAS,CAAC;QAC9C,CAAC;MAEP;IACF;EACF,CAAC;AACH,CAAC,CAAC;AAEFM,MAAM,CAACC,OAAO,GAAG;EAACtB;AAAyB,CAAC"}},"mtime":1665494206423}}